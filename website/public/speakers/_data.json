{
  "css": {
    "alan-stearns": {
      "name": "Alan Stearns",
      "avatar": "/assets/img/speakers/css/alan-stearns.jpg",
      "talk": {
        "title": "Becoming Responsible for CSS",
        "description": "<p>People should feel a sense of ownership and responsibility for the tools they use. I've become responsible for the future of CSS by becoming co-chair of the working group. But everyone who uses CSS can help by communicating what they're doing, shouting when things go wrong, and scripting better solutions. I'll talk about how people can engage in standards discussions, log bugs and write testcases, and how the Houdini task force will let more people write better code for styling.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/87",
      "contact": {
        "twitter": "alanstearns",
        "github": ""
      }
    },
    "alice-bartlett": {
      "name": "Alice Bartlett",
      "avatar": "/assets/img/speakers/css/alice-bartlett.jpg",
      "talk": {
        "title": "“Can't you just make it more like Bootstrap” | Considerations for creating a component system",
        "description": "<p>Origami is the Financial Times' component system (http://origami.ft.com), it has components made written in Sass and JavaScript and several tools (a CDN, a CLI etc) to help people use those components. “Can't you just make it more like Bootstrap” is something one of the developers here said to me when I was doing some user research on how to improve Origami for our internal users (ie other developers)</p><p>This talk will cover the difficulties with creating such a system, and getting it adopted by a company with over 60 websites (not just FT.com!) many of which are written in legacy technologies, with deployment cycles of 'monthly' if you're lucky. It will include some (hopefully relatable, but at least interesting) war stories from getting Origami adopted, and getting funding for a team to actually maintain it.</p><p>This talk will explore decisions made by the Origami team, and contrast them with decisions made by other companies (eg lonely planet, gov.uk) when implementing their own pattern libraries / component systems. Hopefully this exploration through other solutions will stop this talk from being too Financial Times focussed, which I don't think is especially interesting for the audience, and keep it relatable.</p><p>By the end of the talk, the listener should understand a bit about how large companies like the FT deal with front end development at scale, and they will hopefully have some ideas about front end architectures to take back to their own worlds.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/13",
      "contact": {
        "twitter": "alicebartlett",
        "github": ""
      }
    },
    "clarissa-peterson": {
      "name": "Clarissa Peterson",
      "avatar": "/assets/img/speakers/css/clarissa-peterson.jpg",
      "talk": {
        "title": "Creating Beautiful, Accessible, and User-Friendly Forms",
        "description": "<p>Forms are often a key part of websites: they allow users to buy things, sign up, participate, communicate, and get things done. But why are so many online forms confusing, cluttered, and difficult to use? In this session, you'll learn which HTML elements and attributes to use to make sure your form is accessible, understandable, and shows up correctly on the screen. You'll find out the best way to style a form with CSS to make sure it looks good on any browser, device or screen size. You'll learn how to validate form data and provide useful error messages — but also how you can help users fill in the correct information before submitting. And you'll find out what you need to do so that your forms are easier to complete on touch screens.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/256",
      "contact": {
        "twitter": "clarissa",
        "github": ""
      }
    },
    "gregor-martynus": {
      "name": "Gregor Martynus",
      "avatar": "/assets/img/speakers/css/gregor-martynus.jpg",
      "talk": {
        "title": "Inviting Communities",
        "description": "<p>JavaScript communities, be it around open source projects, meet ups or conferences, have a tradition of being very welcoming and invested into growing their contributors and maintainers, both in quantity and diversity.</p><p>But how does it work? How to bring people together who would love to participate but often don’t know how on the one side, and maintainers who appreciate every kind of contribution? There seems to be a big gap, because if there is one thing we learned at Hoodie & the JS Conf family, both sides exist, but are still figuring out how to close the gap.</p><p>In this talk, I’ll talk about what works for as at Hoodie, and how people perceive us as “one of the most diverse and inclusive [Open Source] communities”, without the code part being even ready :) Expect a lot of practical tips that will help you contribute to open source (with so much more than just code), and how to maintain and grow your own projects without loosing the fun and burning yourself out. </p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/305",
      "contact": {
        "twitter": "gr2m",
        "github": ""
      }
    },
    "james-steinbach": {
      "name": "James Steinbach",
      "avatar": "/assets/img/speakers/css/james-steinbach.jpg",
      "talk": {
        "title": "Using Sass &amp; PostCSS Together",
        "description": "<p>CSS gets a really bad rap in web development. Some of it is unearned (like snarky comments about “only a front-end developer”), some of it is really criticism about inconsistent browser implementation, and some of it is valid concern about limitations and inconsistencies in CSS itself. No matter where the negative press comes from, the response is the same: we try to solve those problems by improving CSS. Don’t like the fact that there are no loops or logic in CSS? Fix it by using Sass or another preprocessor. Don’t like cross-browser bugs? Fix it by adding Autoprefixer to your workflow. Don’t like limitations? Try to fix it by using not-yet-spec CSS code.</p><p>PostCSS is a tool that tries to fix CSS in multiple ways. It can process Sass-like syntax; it can fix vendor-prefixes, it can almost make pre-spec CSS possible. It’s getting a lot of attention now, so it’s important for us to know how we can use it.</p><p>PostCSS is a powerful tool and it can be a fantastic complement to the preprocessor you’ve already got in your workflow. I believe it’s best to use Sass, Less, or Stylus for compiling any non-CSS to CSS, and to use PostCSS to turn valid CSS into better CSS. There are a few concerns to keep in mind as you integrate PostCSS into your toolkit. As much as possible, only process valid CSS with it and be careful about relying on its ability to emulate non-implemented syntax.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/73",
      "contact": {
        "twitter": "jdsteinbach",
        "github": ""
      }
    },
    "justin-mcdowell": {
      "name": "Justin McDowell",
      "avatar": "/assets/img/speakers/css/justin-mcdowell.jpg",
      "talk": {
        "title": "Bauhaus in the Browser",
        "description": "<p>Until recently, design on the web has been limited to fragile, horizontal, and boxy layouts. Today there are new tools in CSS that can help us breathe new life into stale projects. Some of them are cutting edge, while others are quite mature yet still under-used. This talk is centered around the use of emerging CSS tools: grid, shapes, transforms, viewport units, and others.</p><p>Attendees will get a showcase of how these new digital techniques can be applied to the web by journeying back to the past to one of the most notable periods in the history of design: Bauhaus modernism. During this period, design was highly influential yet gleefully experimental, with strict geometry, overlapping elements, and rotated text. Attendees will see works by artist Piet Mondrian, typographer Jan Tschichold, dadaist Kurt Schwitters, and metal-worker Marianne Brandt recreated or redesigned on screen, and optimized for the new medium of mobile devices. By the end, they will have practical examples of how to mix these new tools together to solve old design problems in novel ways—using wisdom from the Bauhaus school.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/374",
      "contact": {
        "twitter": "revoltpuppy",
        "github": ""
      }
    },
    "lourdes-montano": {
      "name": "Lourdes Montano",
      "avatar": "/assets/img/speakers/css/lourdes-montano.jpg",
      "talk": {
        "title": "Learning and feeling overwhelmed: methods to organize your learning process in CSS",
        "description": "<p>We've all been there. Trying to level up our CSS, reading tutorials and blog posts only to end up thinking that there is so much to learn that we'll never be able to tackle everything.</p><p>This talk is about the learning process I've had (and I still have) to learn and improve my CSS skills in a world where everything changes so fast and new techniques come along every few months.</p><p>In this talk you will learn:</p><ul><li>How to organize your learning process and not feeling overwhelmed.</li><li>Setting learning goals.</li><li>Have a roadmap from point A to point B...and learning that detours can be interesting when learning something new.</li></ul>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/34",
      "contact": {
        "twitter": "loumontano",
        "github": ""
      }
    },
    "mike-kivikoski": {
      "name": "Mike Kivikoski",
      "avatar": "/assets/img/speakers/css/mike-kivikoski.jpg",
      "talk": {
        "title": "CSS Pseudo – :hover, ::after and beyond",
        "description": "<p>Learn practical uses for over 35 pseudo-classes and pseudo-elements. Starting with the basics, you’ll quickly advance to use cases that apply to positioning, text, content, and get a glimpse at some (hopeful) future selectors. All levels of CSS experience are welcome and encouraged to attend - there will be something for everyone! </p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/191",
      "contact": {
        "twitter": "mkivikoski",
        "github": ""
      }
    },
    "miriam-suzanne": {
      "name": "Miriam Suzanne",
      "avatar": "/assets/img/speakers/css/miriam-suzanne.jpg",
      "talk": {
        "title": "Code Patterns for Pattern-Making",
        "description": "<p>Style Guides and Pattern Libraries are great tools for documenting the relationships between code and design, but beautiful docs and consistent UI are only half the battle. Somewhere, behind the scenes, those patterns have to live in our code, and hopefully make life easier for developers. We can go beyond “living” style guides to find tools that encourage and document pattern-making from the ground up, across projects, without adding developer overhead. From Sass maps and template macros, to front-end architecture and style-guide generators — let's talk about the code patterns that make our UI patterns possible.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/157",
      "contact": {
        "twitter": "mirisuzanne",
        "github": ""
      }
    },
    "natalya-shelburne": {
      "name": "Natalya Shelburne",
      "avatar": "/assets/img/speakers/css/natalya-shelburne.jpg",
      "talk": {
        "title": "Practical color theory for people who code",
        "description": "<p>Something that sounds as simple as picking a color palette is often the very thing that scares developers away from diving into design. Design decisions feel so open ended and exposed, and everyone's a critic. Plus, there is no compiler throwing an error or tests failing if your colors clash. No wonder I’ve seen amazing developers clam up when it’s time to make some design decisions, deferring to “someone creative, who knows more about design” even if I know they want to learn more about design themselves.</p><p>After my presentation, developers will be able to do the basics of color theory, and to feel confident about learning more if they are inspired. How will I do this? The developer way - by abstracting away my domain knowledge as an artist into variables and functions and sharing that information with others. My goal is to demystify design decisions and reveal them to be logical, predictable, and driven by principles that anyone can learn. Designers get something out of this talk too, not only do I encourage every developer in the room to appreciate the domain knowledge designers have to internalize, the many decisions that they have to make, and the hard work it takes to wield color intentionally and skillfully, I also show them how to better communicate these decisions to developers.</p><ul><li>Along the way, we’ll answer a lot of the following questions:</li><li>How can I improve accessibility with my use of color?</li><li>Why are most ‘call to action’ buttons a warm color like red or orange?</li><li>Why shouldn't I use #000000 on my website?</li><li>Why can red and green color schemes troublesome in design?</li><li>What happens if you mix exactly equal parts red and green? How about blue and orange?</li><li>Why do highlights always go on the tops of buttons?</li><li>Why do some colors look good together?</li><li>Why does a color look good in a color picker, but can look so bad when you use it on your site?</li><li>Why does using more white space make things look so much better?</li><li>Why are Sass variables and color functions such an awesome tool for developers?</li></ul><p>Again, this isn’t a talk about how colors make us feel - this is science! I will be talking wavelengths, old school fine art resources, and code!</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/235",
      "contact": {
        "twitter": "natalyathree",
        "github": ""
      }
    },
    "stephanie-hobson": {
      "name": "Stephanie Hobson",
      "avatar": "/assets/img/speakers/css/stephanie-hobson.jpg",
      "talk": {
        "title": "Flipping Tables: Displaying Data on Small Screens",
        "description": "<p>Tables have gotten a bad reputation in the last few years as finicky and hard to work with - partly because they’ve been used for the wrong thing (layout) and partly because desktop friendly wide tables don’t adapt to the narrow screens of mobile devices. But, tables are still the best way to present data for comparison and manipulation. So how can we make them as responsive as the rest of our site? This talk will cover design and code tips for making tables more readable on any screen and more adaptable to small screens.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/196",
      "contact": {
        "twitter": "stephaniehobson",
        "github": ""
      }
    },
    "tyler-sticka": {
      "name": "Tyler Sticka",
      "avatar": "/assets/img/speakers/css/tyler-sticka.jpg",
      "talk": {
        "title": "SVG: So Very Good",
        "description": "<p>Icon fonts! CSS-only illustrations! High-resolution GIF animations! Today's web designers still regularly and enthusiastically employ these techniques... yet they're all a better fit for SVG, a powerful vector image format that's already old enough to drive a car.</p><p>Join Cloud Four's Lead Designer Tyler Sticka for an impassioned introduction to your new favorite image format: What it is, how it works, and why it's so awesome.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/142",
      "contact": {
        "twitter": "tylersticka",
        "github": ""
      }
    }
  },
  "browser": {
    "rebecca-murphey": {
      "name": "Rebecca Murphey",
      "avatar": "/assets/img/speakers/browser/rebecca-murphey.jpg",
      "talk": {
        "title": "Making it better without making it over",
        "description": "<p>If you've read the Twitters or checked out a JavaScript conference lineup lately — or, goodness help you, if you've reviewed a batch of conference proposals — you might think JavaScript these days is all about React and Flux and Redux and immutably isomorphic Babel-ified ES6, with maybe some web audio, offline, WebGL, VR, SVG, and an npm script or twelve thrown in for good measure. (I mean, gulp talks are sooooo 2014, amirite?) There's so much to learn about JavaScript that there are whole Medium posts about how there's so much to learn about JavaScript, and whole conferences to remind you how much you don't know.</p><p>Here's the thing: maybe you're lucky enough to live in this magical world where everything you build is shiny and new, but there are an awful lot of people working on client-side apps that came into being back when yayQuery was a thing and Backbone wasn't. They're building software that serves hundreds of millions of actual users, software that makes actual money, software whose underlying architecture is such that there's rarely such a thing as a “small change,” even as the demand for new features never subsides.</p><p>If you're one of these developers and you're starting to feel like modern JavaScript has left you behind, this talk is for you. I'll share the story of how I started a new job this year by paying a visit to JavaScript circa 2009, back when Ryan Dahl was getting ready to announce Node and Facebook was still four years away from being mocked for the apparent heresy of JSX. I'll explain how I modernized and best-practice-ified a project that didn't even have a package.json, smoothing the development process, eliminating common sources of bugs, paving the way for bigger improvements, and never once uttering the words “we oughta just start from scratch.” </p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/10",
      "contact": {
        "twitter": "rmurphey",
        "github": ""
      }
    },
    "sarah-meyer": {
      "name": "Sarah Meyer",
      "avatar": "/assets/img/speakers/browser/sarah-meyer.jpg",
      "talk": {
        "title": "JavaScript Minus JavaScript",
        "description": "<p>Browsing the web with JavaScript turned off is a pretty boring experience: a lot of the Internet simply doesn’t work without it! My team at Rent the Runway spent the last nine months building a modern and interesting interface that works with JavaScript disabled. But we're web developers! Why would we choose to do without such an important tool?</p><p>It took working in a codebase that was almost entirely spaghetti jQuery and halfheartedly-implemented Backbone for me to realize just how brittle a site is when JavaScript is the only thing keeping it working. While users operating without JavaScript enabled are probably rarer than unicorn startups, designing site architecture with them in mind has broad benefits: fast, satisfying interactions and consistently displayed information.</p><p>Server-rendered React gave us the best of both worlds. Links point to URLs that a server knows about. Forms are built of semantic HTML elements and point at endpoints that can handle non-AJAX requests. Custom tags and scrolling behavior always have native fallbacks. Modals are never the only way to access behavior, especially critical behavior like login.</p><p>I love JavaScript. It is the only tool that does what it does. And that’s why, these days, I realize it’s so important to turn it off sometimes.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/132",
      "contact": {
        "twitter": "meyerini",
        "github": ""
      }
    },
    "tara-sdlf": {
      "name": "Tara Scherner de la Fuente",
      "avatar": "/assets/img/speakers/browser/tara-sdlf.jpg",
      "bio": "Tara is a Ruby developer who currently codes at Roostify. Previously at LivingSocial, she has had careers in academia, human resources, and private investigation. She has an expansive t-shirt collection, and masquerades as a goat for @GoatUserStories. She purr programs with her cat Lulu via a remote/distributed/caffeinated living room office in Portland, Oregon.",
      "talk": {
        "title": "Onboarding Superheroes",
        "description": "<p>This is a talk about deep, dark, paralyzing, hysterical (laughing with you) shame. The specific horrors and pitfalls for and from the new (and new-to-you) developer that we rarely discuss. These are the small, unspoken details no one covers in the onboarding manual for either side of the party. There are concrete opportunities you and members of your team have in those first few weeks to be career superheroes for (or as!) a new employee, with very little effort, that can lead to professional (in addition to ethical) advancement for everyone.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/31",
      "contact": {
        "twitter": "MediaRemedial",
        "github": ""
      }
    },
    "evan-you": {
      "name": "Evan You",
      "avatar": "/assets/img/speakers/browser/evan-you.jpg",
      "talk": {
        "title": "Demystifying Frontend Framework Performance",
        "description": "<p>Developers often consider performance an important factor when choosing frameworks, however it is often not so straightforward when trying to measure the performance of a framework. In this talk I am going to walk the audience through the techniques used in major frontend frameworks - namely dirty checking, virtual-dom diffing and dependency-tracking. I will also compare them in different use case scenarios to give users a balanced idea of how each strategy performs under different circumstances.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/46",
      "contact": {
        "twitter": "youyuxi",
        "github": ""
      }
    },
    "seth-samuel": {
      "name": "Seth Samuel",
      "avatar": "/assets/img/speakers/browser/seth-samuel.jpg",
      "talk": {
        "title": "Arbitrary Computation on the GPU Using WebGL",
        "description": "<p>WebGL is already widely in use for 3D graphics and image processing but could be used for much more. We'll learn how to pass arbitrary data to the GPU for parallel processing, how to get that processed data back into Javascript, and all the reasons this doesn't work even when it should.</p><p>This talk starts with a review of WebGL shaders and how data is passed through the WebGL pipeline and processed in parallel. Next I'll show some examples of traditional image processing using WebGL. After that, I'll explain how to pass arbitrary data into the GPU and how to retrieve output from those parallel calculations. Finally, there will be an example of this system in action, and then several examples that don't work as expected with explanations of the limitations of the current WebGL architecture.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/79",
      "contact": {
        "twitter": "sethfsamuel",
        "github": ""
      }
    },
    "dale-bustad": {
      "name": "Dale Bustad",
      "avatar": "/assets/img/speakers/browser/dale-bustad.jpg",
      "talk": {
        "title": "Embrace HTTP/2 Server Push",
        "description": "<p>HTTP/2 is here and it’s supported by all major browsers on mobile and desktop.  But, because of its history, the JavaScript ecosystem is not ready to take advantage.  That’s a pity, but it is also avoidable.</p><p>H2 brings with it a number of features for improving performance: header compression, request multiplexing, shared compression context.</p><p><strong>However, I'd like to focus in on one feature in particular, and how it can make a difference for you: server push.</strong></p><p>Server push is a protocol-level feature that allows your server to send additional assets to the client in response to a request. Client asks for A, server knows the client needs B and C as well, the client gets A B and C. Strategically used, this will allow your server to short-circuit the back-and-forth “waterfall” of requests.</p><p>This technology has a number of significant implications.</p><p>It has the potential to improve performance for single-page applications, especially for clients with high-latency connections (like mobile). It will also make obsolete the bundling strategies used by most modern JavaScript tooling.  Code delivery strategies that take advantage of server push could match or outperform specialized dead code elimination (“tree-shaking”) from tools like Rollup and Webpack.</p><p>HTTP/1.1 has been in use for over twenty years.  That's the era of Netscape 2.0, IE 2.0, Lynx 2.5 (for you grey beards), and the last episode of The Fresh Prince of Bel-Air.  Let's bring our bundling strategies into the 20th century.</p><p>In this talk, I will:</p><ul><li>Overview HTTP/2 server push and how it works;</li><li>Walk through an example that contrasts performance of an SPA loaded via HTTP/1.1 vs HTTP/2 with server push;</li><li>Summarize the state of affairs for HTTP/2 support on the server-side; and</li><li>Introduce tools and strategies that can help you take advantage of HTTP/2 server push, without sacrificing the power of your current toolset.</li></ul>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/209",
      "contact": {
        "twitter": "divmain",
        "github": ""
      }
    },
    "noah-adams": {
      "name": "Noah Adams",
      "avatar": "/assets/img/speakers/browser/noah-adams.jpg",
      "talk": {
        "title": "Scripting in the 3rd party: True tales of horror and hope from other people's pages",
        "description": "<p>In a dystopian cyberpunk future, website features are added by the simple addition of a snippet of javascript. These scripts, never before run or tested together, interact, and birth an artificial intelligence bent on taking vengeance on the people responsible for its creation. Or the styles look funky, and there’s a name collision on a cookie or something.</p><p>Writing scripts for someone else’s page presents unique challenges, from a hostile global namespace, to unintended module system interactions, to load order race conditions, to mysteriously broken implementations of JSON.stringify().</p><p>In this talk we will go about learning how to diagnose, remedy and defend against problems like these. Further, we’ll go over patterns for reliably writing, building, testing and delivering scripts into hostile or unexplored environments, based on my own experiences of dread, regret, elation and hope, delivering code into millions of other people’s page views, daily.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/270",
      "contact": {
        "twitter": "noah_adams",
        "github": ""
      }
    },
    "nolan-lawson": {
      "name": "Nolan Lawson",
      "avatar": "/assets/img/speakers/browser/nolan-lawson.jpg",
      "talk": {
        "title": "Demystifying Web Workers and Service Workers",
        "description": "<p>Web Workers, Service Workers, Shared Workers – whew, parallelism on the web sure sounds like a lot of work! In this talk, though, I'll show how it's really not such a hard concept to grasp, and how you can harness these powerful APIs to bring a smoother framerate and offline capabilities to your web app.</p>"
      },
      "cfp_url": "",
      "contact": {
        "twitter": "nolanlawson",
        "github": ""
      }
    },
    "liz-abinante": {
      "name": "Liz Abinante",
      "avatar": "/assets/img/speakers/browser/liz-abinante.jpg",
      "talk": {
        "title": "In Defense of Static Sites",
        "description": "The most basic sites don't need servers, and they don't need fancy front end routing. And yet... how did we get here, and why are we so afraid to go back to the basics? Who are we actually building these sites for and who are we harming by front loading so many build tools, complex frameworks, and overblown architecture? Hint: it's not just us, it's out users, too.</p><p>Static sites serve a purpose, and they're really important pieces of the web's history and its future. Static doesn't mean forever unchanged and it doesn't mean you're stuck with a dead site that you can never update. Quite frankly, static sites have gotten a bad reputation and it's not their fault: we've all been so distracted by shiny new things to remember their virtues.</p><p>I'll revisit what it means to build a static site, what the use cases are, how you know its the right technical choice, what tools to use, and when to scale up to something more complex."
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/52",
      "contact": {
        "twitter": "feministy",
        "github": ""
      }
    },
    "marcy-sutton": {
      "name": "Marcy Sutton",
      "avatar": "/assets/img/speakers/browser/marcy-sutton.jpg",
      "talk": {
        "title": "Where in the Stack is Carmen Sanfrancisco?",
        "description": "<p>We're going on an adventure through the JavaScript jungle. Node.js, browser JS, browser add-on contexts...where in the world are we and what can we do? In my work on automated accessibility testing, I have found lines to be quite blurry in different parts of the web development stack. For example, when writing APIs in Node.js to be executed in a browser, it's not always clear what your options are–even more so in browser extension development. We'll look closely at some of these details and learn a lot about testing for accessibility in the process, encouraging development of websites that everyone can use.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/104",
      "contact": {
        "twitter": "marcysutton",
        "github": ""
      }
    },
    "rachel-white": {
      "name": "Rachel White",
      "avatar": "/assets/img/speakers/browser/rachel-white.jpg",
      "talk": {
        "title": "JavaScript as Play: A primer on getting started with video games",
        "description": "<p>Now that you know enough front end technologies to be dangerous, lets use those skills to make a game! We'll take a look at the open source framework Phaser to learn how to create your own browser based game. Together we'll explore topics such as sprite animation, collision detection, and scoring-- by the end we'll have a playable platformer you can tinker with.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/133",
      "contact": {
        "twitter": "ohhoe",
        "github": ""
      }
    },
    "thomas-wilburn": {
      "name": "Thomas Wilburn",
      "avatar": "/assets/img/speakers/browser/thomas-wilburn.jpg",
      "talk": {
        "title": "Custom elements in production",
        "description": "<p>For several years now, Web Components have hovered on the verge of widespread adoption, without quite tipping over the edge. But that doesn't mean they're unusable: for the last two years, we've been deploying custom elements in production at The Seattle Times on a site with millions of pageviews, on many of our most popular articles. Now that browsers have reached consensus on V1 of the custom element spec and are starting implementation, there's no better time to learn how this can work for you.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/60",
      "contact": {
        "twitter": "thomaswilburn",
        "github": ""
      }
    }
  },
  "node": {
    "bill-automata": {
      "name": "Bill Automata",
      "avatar": "/assets/img/speakers/node/bill-automata.jpg",
      "talk": {
        "title": "require('crypto') is a human right",
        "description": "<p>An accessible tour of the Node.js Crypto API through the lens of history and politics.</p><ul><li>Diffie-Hellman & RSA: key generation, encrypt, and decrypt.</li><li>RSA sign and verify.</li><li>AES and other symmetric ciphers.</li></ul><p>Almost everything in OpenSSL has a rich history. A lot of the code we link when compiling Node.js was once illegal to disseminate under treaties that regulate things like fighter jets and night vision.</p><p>The effort to weaken these tools is still underway. You can't help fight that effort unless you are knowledgeable of more than just the basic implementation details.</p><p>By the end of the talk you will have been exposed to the important concepts, applied and theoretical, necessary to use strong cryptography in any of your Node.js projects. I'll crack some weak keys of different types in realtime using the cluster API and some spare cloud resources if my company has any spare AWS reserved instances. I'll also leave you with a drive to protect access to strong cryptography all over the world.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/33",
      "contact": {
        "twitter": "billautomata",
        "github": ""
      }
    },
    "pawel-szymczykowski": {
      "name": "Pawel Szymczykowski",
      "avatar": "/assets/img/speakers/node/pawel-szymczykowski.jpg",
      "talk": {
        "title": "Why did the robot cross the road? Computer vision, robots and mobile games.",
        "description": "<p>The popularity of mobile gaming and in-app purchases has changed the way games are played. Once upon a time, the only limit to how far you could progress was your skill level and persistence. Now, games seem to be designed to hinder us until we have either shelled out real currency for a lot of virtual gems, or watched a lot of advertisements. That’s not fun, that’s tedious!</p><p>Robots are good at tasks that require precision and speed, but they are also great at tasks that are tedious and require an infinite amount of patience. What if we programmed a robot to do the crap parts of mobile games for us? Then we can enjoy the fun parts and / or collect all of the things as we of the Pokémon generation have been programmed to do.</p><p>In this talk we’ll learn how to use an open source robot called Tapsterbot, a webcam, and Node.js OpenCV bindings to teach your computer to play your favorite mobile games for you (or just watch the ads) so that you can do more important things!</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/19",
      "contact": {
        "twitter": "makenai",
        "github": ""
      }
    },
    "safia-abdalla": {
      "name": "Safia Abdalla",
      "avatar": "/assets/img/speakers/node/safia-abdalla.jpg",
      "talk": {
        "title": "The Hitchhiker's Guide to All Things Memory in Javascript",
        "description": "<p>Unlike lower level languages, JavaScript protects us from the frustrations of managing memory on the system. Nonetheless, it is important for developers to have a comprehensive understanding of memory allocation and how the memory allocator in JavaScript works so that they can develop memory-performant code. I'll spend the first half of the talk discussing the fundamentals of memory allocation and the memory allocator implementation used in JavaScript. The second half of the talk will consist of live-optimization of code samples as I show the audience how to improve JavaScript code that is not memory performant based on the fundamentals recently learned. Attendees will leave this talk will a firm understanding of the theoretical details behind memory allocation and a practical understanding of how these details affect the code that they write on a daily basis.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/173",
      "contact": {
        "twitter": "captainsafia",
        "github": ""
      }
    },
    "russell-hay": {
      "name": "Russell Hay",
      "avatar": "/assets/img/speakers/node/russell-hay.jpg",
      "talk": {
        "title": "Happy Sparkle Glitter Fun Zone - LEDs and JavaScript",
        "description": "<p>This talk is about how, with a little bit of knowledge, a ton of RGB LEDs, and some low power computers, you can make amazing things. I will cover how to get yourself up and running quickly using Johnny-five + node-pixel on a small, low-cost, low-power device running javascript, and how to connect the board to outside sources to provide intelligent displays that can take data from the world, and turn it into a visualization on a strip of leds. I will show how to take a handful of LEDS, using johnny-five with the new i2c backpack for neo-pixels and make something flashy for your home, office, or a public space.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/120",
      "contact": {
        "twitter": "russellhay",
        "github": ""
      }
    },
    "jenn-turner": {
      "name": "Jenn Turner",
      "avatar": "/assets/img/speakers/node/jenn-turner.jpg",
      "talk": {
        "title": "Open Source beyond software",
        "description": "<p>I don’t know if you’ve heard, but there’s a secret going around that will probably startle and shock software developers the world over.</p><p>Code isn’t the most crucial part of your project.</p><p>At its best, open source serves to empower the recipients of its brilliance through technological innovation. At its core, open source is a jumble of information created by people to be used by other people, like any other transactional relationship before it.</p><p>Yet open source is viewed as being a “members only“ club for those who speak its language.</p><p>That‘s dumb and I’m here to throw that old ideology out in favor of inviting a more realistic one: open source is for everyone.</p><p>At Hoodie, we recognize that the best open source projects hold strong values like diversity, empowerment and decentralisation. So it only makes sense for an entire project to be built by an amazing and dedicated community consisting of developers and non-coding experts. We began doing this last year by holding an open call for editorial contributors to join the team. The response was overwhelmingly positive.</p><p>People have been waiting for an opportunity to join your open source communities, but first you have to prepare the way. I’ll be sharing the lessons learned from Hoodie venturing into the exploration of inviting non-coding experts to join forces and how the results of this experience have brought us closer to modern open source, beyond software.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/137",
      "contact": {
        "twitter": "jennwrites",
        "github": ""
      }
    },
    "bryan-hughes": {
      "name": "Bryan Hughes",
      "avatar": "/assets/img/speakers/node/bryan-hughes.jpg",
      "talk": {
        "title": "API Design Through the Lens of Photography",
        "description": "<p>Photography is all about understanding and working within a wide variety of constraints. Mechanical and electrical systems interact to create limitations for photographers. Yet these constraints have led to endless creativity.</p><p>API design is a lot like photography. There are often dozens of interrelated constraints that API designers must adhere to, which can seem daunting at first. But like photography, understanding and embracing these constraints leads to great design.</p><p>This talk will teach you how to find your API's “voice”, the underlying philosophy that makes an API consistent and easy to use, all viewed through the lens of photography.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/110",
      "contact": {
        "twitter": "nebrius",
        "github": ""
      }
    },
    "yoshua-wuyts": {
      "name": "Yoshua Wuyts",
      "avatar": "/assets/img/speakers/node/yoshua-wuyts.jpg",
      "talk": {
        "title": "the anatomy of a Node server",
        "description": "<p>Modularity is the beating heart of Unix. By creating tiny composable tools, bigger things can be achieved. Discovering these tools is no trivial task though. As is the case in Node: if you're building servers without using frameworks, which packages should you use?</p><p>Luckily there's a strong community of authors building, and maintaining packages that work around the common interface of require('http'). In this talk we'll cover the aspects that make for a strong Node application and the packages that will help you achieve that.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/280",
      "contact": {
        "twitter": "yoshuawuyts",
        "github": ""
      }
    },
    "ivana-mcconnell": {
      "name": "Ivana McConnell",
      "avatar": "/assets/img/speakers/node/ivana-mcconnell.jpg",
      "talk": {
        "title": "Our Identities Have No Bodies: Web, Code, and Self-Exploration",
        "description": "<p>Whether we’re ready or not, the nature of identity is changing. In the internet’s early days, places like Livejournal, usenet, and Geocities fostered a kind of freedom and anonymity that is hard to find now. In an era when single-sign-on is king, we are increasingly moving towards tying our faces to data for advertising and marketing purposes, we remove barriers between the digital and the physical. These barrier were often placed for a reason— to explore parts of our identity that we want to keep private. There were opportunities for identity exploration, self-expression, and community, concepts which shift today in the world of web development and open-source.</p><p>So how are we—as designers and developers of the web— responsible for others' identity expression? How does our code help (and hinder) the building of communities which keep us safe and contribute to harassment? Let's wax nostalgic a bit about the internet's early days and ask how much we should care about the products we build, and how users build their identities around those products and our code. </p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/67",
      "contact": {
        "twitter": "IvanaMcConnell",
        "github": ""
      }
    },
    "alejandro-oviedo": {
      "name": "Alejandro Oviedo",
      "avatar": "/assets/img/speakers/node/alejandro-oviedo.jpg",
      "talk": {
        "title": "Demystifying (JavaScript) engines",
        "description": "<p>How a JavaScript engine works? What are its basic components? How to measure its performance? What is JIT compilation? Stigmatization: is JavaScript fast enough? are some of the questions I think we currently fail to answer in a, somewhat, short and direct way.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/322",
      "contact": {
        "twitter": "a0viedo",
        "github": ""
      }
    },
    "nwokedi-idika": {
      "name": "Nwokedi Idika",
      "avatar": "/assets/img/speakers/node/nwokedi-idika.jpg",
      "talk": {
        "title": "Demystifying the Darknet in 30 Minutes or Less",
        "description": "<p>The Darknet has received significant attention in recent years and with it, increased confusion. Darknet, Dark web, Deep net, Deep web, The Onion Router (TOR) are all used interchangeably. Interestingly enough, none of these terms are actually interchangeable. TOR, the most popular instance of a Darknet, is viewed by many as a tool providing complete anonymization. In reality, the anonymity TOR provides is very specific and far from complete. To appreciate this, one must understand how TOR works and therein lies the problem: most people don’t know how TOR works. So, let’s solve that problem.</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/272",
      "contact": {
        "twitter": "nwokedi",
        "github": ""
      }
    },
    "mariko-kosaka": {
      "name": "Mariko Kosaka",
      "avatar": "/assets/img/speakers/node/mariko-kosaka.jpg",
      "talk": {
        "title": "Making a Robot Eye with JavaScript - or Magic of Computer Vision Unraveled",
        "description": "<p>Have you ever wondered how computers see images? Do you want to work on an AR (Augmented Reality) project or build a NodeBot that can recognize and track your face? How about making your own Instagram-like app or finding similer images in Pinterest collection? When you work with an image as your data input, sooner or later you'll encounter the magic term Computer Vision.</p><p>It can be intimidating to get started. At first, that led me to choose a common and powerful library that works like magic in an unfamiliar language (C++). It felt like the library was a black box and I had no control. I started to wonder, what is so magical about computer vision? After all it is just code someone wrote. Can we unravel it? and reconstruct in JavaScript??</p><p>The answer is YES. In this talk, we'll start by getting image data from canvas object, then transform the data to alter an appearance of the image. You will get insight into what data looks like to a browser (hint: it's just an array of numbers !). Next we’ll talk about how to interpret and analyze the data in a meaningful way. Finally, we'll apply what we learned and go through simple image analysis process to build your own AR app in vanilla JavaScript!</p>"
      },
      "cfp_url": "https://speak.cascadiafest.org/admin/talks/125",
      "contact": {
        "twitter": "kosamari",
        "github": ""
      }
    }
  }
}
